package picture;

public class Process {

private final int MAX_INTENSITY = 255;
private final int NUM_OF_BASES = 3;
private final int NUM_OF_COLOURS_IN_MATRIX = 9;
private Picture picture;

 
  public Process(Picture picture) {
    this.picture = picture;
  }
 
  public Picture getPicture() {
    return picture;
  } 

  public void invert() {
    for (int i = 0; i < picture.getHeight(); i++) {
     for (int j = 0; j < picture.getWidth(); j++) {
       Color colour = picture.getPixel(j, i);

       colour.setRed((MAX_INTENSITY) - colour.getRed());
       colour.setGreen((MAX_INTENSITY) - colour.getGreen());
       colour.setBlue((MAX_INTENSITY) - colour.getBlue());

       picture.setPixel(j, i, colour);
     }
    }
  }
   
  public void grayscale() {
    for (int i = 0; i < picture.getHeight(); i++) {
     for (int j = 0; j < picture.getWidth(); j++) {
      Color colour = picture.getPixel(j,i);

      int avg = (colour.getRed() + colour.getBlue()
          + colour.getGreen())/NUM_OF_BASES;
      colour.setRed(avg);
      colour.setGreen(avg);
      colour.setBlue(avg);
    
      picture.setPixel(j, i, colour); 
     }
    } 
  }
  
  public void flipVertical() {
  
  int halfHeight = picture.getHeight()/2;
    
    for (int i = 0; i < halfHeight; i++) {
      for (int j = 0; j < picture.getWidth(); j++) {
        Color original = picture.getPixel(j,i);
        
        int otherY = picture.getHeight() - (i + 1);
        Color toSwapWith = picture.getPixel(j, otherY);
        picture.setPixel(j, i, toSwapWith);
        picture.setPixel(j, otherY, original); 
      }
    }
  }
 
  public void flipHorizontal() {
  
  int halfWidth = picture.getWidth()/2;
    
    for (int i = 0; i < picture.getHeight(); i++) {
      for (int j = 0; j < halfWidth; j++) {
        Color original = picture.getPixel(j, i);

        int otherX = picture.getWidth() - (j + 1);
        Color toSwapWith = picture.getPixel(otherX, i);
        picture.setPixel(j, i, toSwapWith);
        picture.setPixel(otherX, i, original);
      }
    }
  }

  public void rotate(int angle) {
  Picture newImage = Utils.createPicture(picture.getHeight()
      , picture.getWidth());

    if (angle == 90) {
      for (int i = 0; i < picture.getHeight(); i++) {
        for (int j = 0; j < picture.getWidth(); j++) {
          Color colour = picture.getPixel(j,i);
          newImage.setPixel(picture.getWidth()-(i+1),
              j, colour);
        } 
      }
    }
 
    if (angle == 180) {
      rotate(90);
      rotate(90);
    }

    if (angle == 270) {
      rotate(90);
      rotate(90);
      rotate(90);
    }
  }
 
  public void blur() {
  Picture newImage = Utils.createPicture(picture.getWidth()
      , picture.getHeight());
  
    for (int i = 0; i < picture.getWidth(); i++) {
      for (int j = 0; j < picture.getHeight(); j++) {
        if (picture.contains(j+1,i) &&
            picture.contains(j-1,i) &&
            picture.contains(j,i+1) &&
            picture.contains(j,i-1)) {
          int matAverageRed = ((picture.getPixel(j, i)).getRed() + 
			       (picture.getPixel(j+1, i)).getRed() +
			       (picture.getPixel(j-1, i)).getRed() +
			       (picture.getPixel(j, i+1)).getRed() +
			       (picture.getPixel(j, i-1)).getRed() +
			       (picture.getPixel(j-1, i-1)).getRed() +
			       (picture.getPixel(j+1, i-1)).getRed() +
			       (picture.getPixel(j-1, i+1)).getRed() +
			       (picture.getPixel(j+1, i+1)).getRed())/
                                   NUM_OF_COLOURS_IN_MATRIX;
    
          int matAverageGreen = ((picture.getPixel(j, i)).getGreen() + 
			       (picture.getPixel(j+1, i)).getGreen() +
			       (picture.getPixel(j-1, i)).getGreen() +
			       (picture.getPixel(j, i+1)).getGreen() +
			       (picture.getPixel(j, i-1)).getGreen() +
			       (picture.getPixel(j-1, i-1)).getGreen() +
			       (picture.getPixel(j+1, i-1)).getGreen() +
			       (picture.getPixel(j-1, i+1)).getGreen() +
			       (picture.getPixel(j+1, i+1)).getGreen())/
                                   NUM_OF_COLOURS_IN_MATRIX;
          
          int matAverageBlue = ((picture.getPixel(j, i)).getBlue() + 
			       (picture.getPixel(j+1, i)).getBlue() +
			       (picture.getPixel(j-1, i)).getBlue() +
			       (picture.getPixel(j, i+1)).getBlue() +
			       (picture.getPixel(j, i-1)).getBlue() +
			       (picture.getPixel(j-1, i-1)).getBlue() +
			       (picture.getPixel(j+1, i-1)).getBlue() +
			       (picture.getPixel(j-1, i+1)).getBlue() +
			       (picture.getPixel(j+1, i+1)).getBlue())/
                                   NUM_OF_COLOURS_IN_MATRIX;

          Color colour = picture.getPixel(j, i);
          colour.setRed(matAverageRed);
          colour.setGreen(matAverageGreen);
          colour.setBlue(matAverageBlue);
       }
     }
   }
  }
}
 
